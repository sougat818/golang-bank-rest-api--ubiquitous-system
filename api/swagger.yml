openapi: "3.0.0"
info:
  title: Account API
  version: 1.0.0
  description: Account REST API exposes operations around the account resource. Brought to you by DigiBank, the world's best bank.
servers:
  - url: http://localhost:8080/api
    description: Local account server

paths:
  /accounts:
    post:
      summary: Create a new account
      description: Have you heard of the best bank in the world? If not, you gotta use this endpoint to create a new account in DigiBank. I promise you will not regret it. And guess what, it is completely free.
      operationId: createAccount
      tags:
        - accounts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccount'
      responses:
        '201':
          description: |-
            Successfully created an account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: |-
            Invalid request payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: account/invalid
                error: 'Bad request: invalid input'
        '409':
          description: |-
            Account already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: account/existed
                error: 'Account already exists'
        '500':
          description: |-
            Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: internal
                error: 'Unable to create an account'
    get:
      summary: Get an account by email
      description: This endpoint fetches an account inforamtion by email
      operationId: getAccountByEmail
      tags:
        - accounts
      parameters:
        - name: email
          in: query
          required: true
          description: Account owner's email. The value of this field needs to be URI encoded.
          schema:
            type: string
      responses:
        '200':
          description: |-
            OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '404':
          description: |-
            Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: account/not-found
                error: 'Unable to find requested account'
        '500':
          description: |-
            Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: internal
                error: 'Unable to get accounts'
  /health:
    get:
      summary: Health check endpoint
      description: The endpoint returns the healthcheck status of the account API
      operationId: healthCheck
      tags:
        - ops
      responses:
        '200':
          description: |-
            Healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'

components:
  schemas:
    Account:
      properties:
        id:
          type: integer
          example: 10086
        firstName:
          type: string
          example: Tony
        lastName:
          type: string
          example: Stark
        email:
          type: string
          example: tony.stark@starkindustries.com
        balance:
          type: number
          format: double
          example: 99999999.99
        rewardPoints:
          type: number
          format: int64
          example: 99999999
        stauts:
          type: string
          enum: [ OP PD LK CL ]
          example: OP
      required:
        - id
        - firstName
        - lastName
        - email
        - status
    CreateAccount:
      properties:
        firstName:
          type: string
          example: Tony
        lastName:
          type: string
          example: Stark
        email:
          type: string
          example: tony.stark@starkindustries.com
      required:
        - firstName
        - lastName
        - email
    UpdateAccount:
      properties:
        status:
          type: string
          enum: [ OP PD LK CL ]
          example: CL
    ErrorResponse:
      properties:
        code:
          type: string
        error:
          type: string
      required:
        - code
        - error
    Health:
      properties:
        status:
          type: string
          enum: [ OK ]
          example: OK
      required:
        - status